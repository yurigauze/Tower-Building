#include <SDL2/SDL.h>
#include <list>
#include "Blocos/Bloco.h"
#include "Blocos/BlocoBase.h"
#include "Constants.h"
#include "Utils/Utils.h"
#include "box2d/box2d.h"


int main(int argc, char* argv[]) {
    SDL_Window* janela = NULL;
    SDL_Renderer* renderer = NULL;
    random_initialize();
    
    SDL_Init(SDL_INIT_VIDEO);
    janela = SDL_CreateWindow("Tower Building", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
                              LARGURA, ALTURA, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(janela, -1, SDL_RENDERER_ACCELERATED);

    b2Vec2 gravity(0.0f, -9.81f); // Defina a gravidade
    b2World world(gravity);

    BlocoBase blocoBase(BLOCOBASE_X, BLOCOBASE_Y, 0, 255, 0);
    std::list<Bloco> blocos;
    blocos.emplace_back(&world, BLOCO_X, BLOCO_Y, random_num(), random_num(), random_num());

    bool continua = true;
    SDL_Event evento;

    while (continua) {
        while (SDL_PollEvent(&evento)) {
            if (evento.type == SDL_QUIT) {
                continua = false;
            } else if (evento.type == SDL_KEYDOWN) {
                if (evento.key.keysym.sym == SDLK_SPACE) {
                    // Move o bloco para baixo até atingir a parte inferior da tela
                    while (!blocos.front().naParteInferior()) {
                        blocos.front().moverBaixo();
                        SDL_SetRenderDrawColor(renderer, 133, 193, 233, SDL_ALPHA_OPAQUE);
                        SDL_RenderClear(renderer);
                        for (const auto& bloco : blocos) {
                            bloco.renderizar(renderer);
                            blocoBase.renderizar(renderer);
                        }
                        SDL_RenderPresent(renderer);
                        SDL_Delay(5);
                    }

                    // Adiciona o bloco atual à pilha de blocos
                    blocos.push_back(blocos.front());
                    // Adiciona um novo bloco na parte de cima
                    // Utilizei random_num para gerar com cores diferentes
                    blocos.front() = Bloco(&world, BLOCO_X, BLOCO_Y, random_num(), random_num(), random_num());
                }
            }
        }

        SDL_SetRenderDrawColor(renderer, 133, 193, 233, SDL_ALPHA_OPAQUE);
        SDL_RenderClear(renderer);

        // Renderiza todos os blocos
        for (const auto& bloco : blocos) {
            bloco.renderizar(renderer);
        }
        blocoBase.renderizar(renderer);

        SDL_RenderPresent(renderer);
        SDL_Delay(10);
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(janela);
    SDL_Quit();
    return 0;
}

